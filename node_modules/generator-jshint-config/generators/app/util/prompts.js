'use strict';

module.exports = [
  {
    type: 'input',
    name: 'jsFiles',
    message: 'What is the location of your JS files?',
    default: 'src/js'
  },
  {
    type: 'list',
    name: 'esversion',
    message: 'Which version of ECMAScript syntax you want to use?',
    choices: ['3', '5', '6'],
    default: 2,
  },
  {
    type: 'checkbox',
    name: 'environments',
    message: 'Select environments. These options let JSHint know about some pre-defined global variables.',
    choices: [{name: 'browser - globals exposed by modern browsers', value: 'browser', checked: true},
              {name: "devel - globals that are usually used for logging poor-man's debugging: console, alert, etc.", value: 'devel', checked: true},
              {name: 'mocha - globals exposed by the "BDD" and "TDD" UIs of the Mocha unit testing framework', value: 'mocha', checked: true},
              {name: 'browserify - globals available when using the Browserify tool to build a project', value: 'browserify'},
              {name: 'couchDB - globals exposed by CouchDB', value: 'couch'},
              {name: 'dojo - globals exposed by the Dojo Toolkit', value: 'dojo'},
              {name: 'jasmine - globals exposed by the Jasmine unit testing framework', value: 'jasmine'},
              {name: 'jquery - globals exposed by the jQuery JavaScript library', value: 'jquery'},
              {name: 'module - this option informs JSHint that the input code describes an ECMAScript 6 module', value: 'module'},
              {name: 'mootools - defines globals exposed by the MooTools JavaScript framework', value: 'mootools'},
              {name: 'node - globals available when your code is running inside of the Node runtime environment', value: 'node'},
              {name: 'nonstandard - non-standard but widely adopted globals such as escape and unescape', value: 'nonstandard'},
              {name: 'phantom - globals available when your core is running inside of the PhantomJS runtime environment', value: 'phantom'},
              {name: 'prototypejs - globals exposed by the Prototype JavaScript framework', value: 'prototypejs'},
              {name: 'qunit - globals exposed by the QUnit unit testing framework', value: 'qunit'},
              {name: 'rhino - globals available when your code is running inside of the Rhino runtime environment', value: 'rhino'},
              {name: 'shelljs - globals exposed by the ShellJS library', value: 'shelljs'},
              {name: 'typed - defines globals for typed array constructors', value: 'typed'},
              {name: 'worker - globals available when your code is running inside of a Web Worker', value: 'worker'},
              {name: 'wsh - globals available when your code is running as a script for the Windows Script Host', value: 'wsh'},
              {name: 'yui - globals exposed by the YUI JavaScript framework', value: 'yui'}]
  },
  {
    type: 'confirm',
    name: 'enforcing',
    message: 'Do you want to configure the enforcing options?',
    default: false
  },
  {
    type: 'confirm',
    name: 'bitwise',
    message: 'Prohibit bitwise operators (&, |, ^, etc.).',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'curly',
    message: 'Require {} for every new block or scope.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'eqeqeq',
    message: 'Require triple equals (===) for comparison.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'forin',
    message: 'Require filtering for..in loops with obj.hasOwnProperty().',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'freeze',
    message: 'Prohibit overwriting prototypes of native objects such as Array, Date etc.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'futurehostile',
    message: 'Enable warnings about the use of identifiers which are defined in future versions of JavaScript.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'latedef',
    message: 'Require variables/functions to be defined before being used.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'noarg',
    message: 'Prohibit use of "arguments.caller" and "arguments.callee".',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'nocomma',
    message: 'Prohibit the use of the comma operator.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'nonbsp',
    message: 'Prohibit "non-breaking whitespace" characters.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'nonew',
    message: 'Prohibit use of constructors for side-effects (without assignment).',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'singleGroups',
    message: 'Prohibit the use of the grouping operator when it is not strictly required.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'trailingcomma',
    message: 'Warn when a comma is not placed after the last element in an array or object literal.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'undef',
    message: 'Require all non-global variables to be declared (prevents global leaks).',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'varstmt',
    message: 'Disallow any var statements. Only "let" and "const" are allowed.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'unused',
    message: 'Require all defined variables be used.',
    default: true,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'input',
    name: 'maxcomplexity',
    message: 'Max cyclomatic complexity per function.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'input',
    name: 'maxdepth',
    message: 'Max depth of nested blocks.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'input',
    name: 'maxerr',
    message: 'Maximum amount of warnings before JSHint give up.',
    default: 50,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'input',
    name: 'maxparams',
    message: 'Max number of formal params allowed per function.',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'input',
    name: 'maxstatements',
    message: 'Max number statements per function (positive number, or false for no limit)',
    default: false,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'list',
    name: 'shadow',
    message: 'Allow re-define variables later in code e.g. "var x=1; x=2;".',
    choices: [{name: 'Check for variables defined in the same scope only', value: 'inner'},
              {name: 'Check for variables defined in outer scopes as well', value: 'outer'},
              {name: 'Allow variable shadowing', value: true}],
    default: 0,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'list',
    name: 'strict',
    message: 'Require ES5 Strict Mode.',
    choices: [{name: 'There must be a "use strict"; directive at global level', value: 'global'},
              {name: 'Lint the code as if there is the "use strict"; directive', value: 'implied'},
              {name: 'There must be a "use strict"; directive at function level;', value: true},
              {name: 'Disable warnings about strict mode', value: false}],
    default: 0,
    when: function(answers) {
      return answers.enforcing;
    }
  },
  {
    type: 'confirm',
    name: 'relaxing',
    message: 'Do you want to configure the relaxing options?',
    default: false
  },
  {
    type: 'confirm',
    name: 'asi',
    message: 'Tolerate Automatic Semicolon Insertion (no semicolons).',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'boss',
    message: 'Tolerate assignments where comparisons would be expected.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'debug',
    message: 'Allow debugger statements e.g. browser breakpoints.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'eqnull',
    message: 'Tolerate use of "== null".',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'evil',
    message: 'Tolerate use of "eval" and "new Function()".',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'expr',
    message: 'Tolerate "ExpressionStatement" as Programs.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'funcscope',
    message: 'Tolerate defining variables inside control statements.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'iterator',
    message: 'Tolerate using the "__iterator__" property.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'lastsemic',
    message: 'Tolerate omitting a semicolon for the last statement of a 1-line block.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'loopfunc',
    message: 'Tolerate functions being defined in loops.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'notypeof',
    message: 'Tolerate invalid typeof operator values.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'noyield',
    message: 'Suppress warnings about generator functions with no yield statement in them.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'plusplus',
    message: 'Prohibit the use of unary increment and decrement operators.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'proto',
    message: 'Tolerate using the "__proto__" property.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'scripturl',
    message: 'Tolerate script-targeted URLs.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'supernew',
    message: 'Tolerate "new function () { ... };" and "new Object;".',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'validthis',
    message: 'Tolerate using this in a non-constructor function.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  },
  {
    type: 'confirm',
    name: 'withstmt',
    message: 'Suppress warnings about the use of the with statement.',
    default: false,
    when: function(answers) {
      return answers.relaxing;
    }
  }
];
